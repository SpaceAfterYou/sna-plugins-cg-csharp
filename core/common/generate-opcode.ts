import type { OpcodeGroupFieldList } from '@/datatypes/opcode/group/list'
import type { ConfigPair } from '../../types/config-pair'

import { nameOf } from '../enum/name-of'
import { save } from '../save'

function generate(list: OpcodeGroupFieldList) {
  const operators = []
  const constructors = []

  for (const group of list) {
    const name = nameOf(group.name)

    const inline = '    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'

    let operator = ''
    operator += inline
    operator += `    public static implicit operator ${name}(MessageOpcode value) => (${name})value.Group;\n`

    operators.push(operator)

    let constructor = ''
    constructor += inline
    constructor += `    public MessageOpcode(GroupOpcode group, ${name} command) : this((byte)group, (byte)command) { }\n`

    constructors.push(constructor)
  }

  return {
    operators: operators.join('\n'),
    constructors: constructors.join('\n'),
  }
}

export async function generateOpcode(common: ConfigPair, _enum: ConfigPair, list: OpcodeGroupFieldList) {
  const { operators, constructors } = generate(list)

  let file = '// <auto-generated>'
  file += '\n\n'

  file += `using ${_enum.namespace}.Opcodes;\n`
  file += 'using System.Runtime.CompilerServices;\n'
  file += 'using System.Runtime.InteropServices;\n'
  file += '\n'
  file += `namespace ${common.namespace};\n`
  file += '\n'
  file += '[StructLayout(LayoutKind.Explicit)]\n'
  file += 'internal readonly struct MessageOpcode\n'
  file += '{\n'
  file += '    #region Properties\n'
  file += '\n'
  file += '    [field: FieldOffset(0)]\n'
  file += '    public byte Group { get; }\n'
  file += '\n'
  file += '    [field: FieldOffset(1)]\n'
  file += '    public byte Command { get; }\n'
  file += '\n'
  file += '    #endregion Properties\n'
  file += '\n'
  file += '    #region Internal Properties\n'
  file += '\n'
  file += '    [field: FieldOffset(0)]\n'
  file += '    internal ushort Value { get; } = 0;\n'
  file += '\n'
  file += '    #endregion Internal Properties\n'
  file += '\n'
  file += '    #region Operators\n'
  file += '\n'

  // operators

  file += '    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
  file += '    public static implicit operator GroupOpcode(MessageOpcode value) => (GroupOpcode)value.Group;\n'

  file += '\n'
  file += operators

  file += '\n'
  file += '    #endregion Operators\n'
  file += '\n'
  file += '    #region Constructors\n'
  file += '\n'

  // constructors

  file += '    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
  file += '    public MessageOpcode(BinaryReader reader) => Value = reader.ReadUInt16();\n'
  file += '\n'
  file += '    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
  file += '    public MessageOpcode(byte group, byte command) => (Group, Command) = (group, command);\n'

  file += '\n'
  file += constructors

  file += '\n'
  file += '    #endregion Constructors\n'
  file += '}\n'
  file += '\n'

  return save('MessageOpcode', file, common.path)
}
